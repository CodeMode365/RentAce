// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String   @db.VarChar(30)
  email    String   @unique @db.VarChar(50)
  password String   @db.VarChar(250)
  userType UserType @default(CANDIDATE)

  Image         Image[]
  spaces        Space[]
  messages      Messages[]
  conversations Conversation[]
  notification  Notification[]
  comments      Comment[]
  ratings       Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id           String     @id @default(uuid())
  participates User[]
  messages     Messages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Messages {
  id             String       @id @default(uuid())
  content        String
  sender         User         @relation(fields: [senderId], references: [id])
  receiver       Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  conversationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String  @id @default(uuid())
  receiver   User    @relation(fields: [receiverId], references: [id])
  receiverId String
  isSeen     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Space {
  id        String    @id @default(uuid())
  lng       Float
  lat       Float
  title     String
  ownerName String
  spaceType SpaceType @default(OTHER)
  amount    String
  payType   PayType   @default(MONTHLY)
  desc      String

  creator   User      @relation(fields: [creatorId], references: [id])
  creatorId String
  images    Image[]
  comments  Comment[]
  rating    Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id      String @id @default(uuid())
  star    Float
  Space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String
  ratedBy User   @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id          String @id @default(uuid())
  content     String
  Space       Space  @relation(fields: [spaceId], references: [id])
  spaceId     String
  commentor   User   @relation(fields: [commentorId], references: [id])
  commentorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id           String  @id @default(uuid())
  thumbnailUrl String
  imageUrl     String
  Space        Space?  @relation(fields: [spaceId], references: [id])
  spaceId      String?
  creator      User?   @relation(fields: [creatorId], references: [id])
  creatorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  ADMIN
  CANDIDATE
  MODERATOR
  GUEST
  PREMIUM
}

enum SpaceType {
  PAKRING
  ROOM
  FLAT
  HOUSE
  OTHER
}

enum PayType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}
